#!/usr/bin/env python3
"""
Enhanced AI Video Generation System with Comprehensive Planning
Creates professional videos with Luma AI and intelligent planning
"""
import argparse
import json
import os
import sys
import subprocess
import tempfile
import shutil
from pathlib import Path
import requests
from openai import OpenAI
from luma_service import LumaVideoService
from ai_planner import VideoAdPlanner

def progress_update(progress, message):
    """Send progress update that the Node.js server can parse"""
    print(f"PROGRESS:{progress}:{message}")
    sys.stdout.flush()

def create_enhanced_video_generation(brand_info, output_file):
    """
    Complete enhanced video generation pipeline
    """
    try:
        # Step 1: Create comprehensive AI plan
        progress_update(10, "Creating comprehensive AI marketing plan")
        planner = VideoAdPlanner()
        complete_plan = planner.create_complete_plan(brand_info)
        
        print(f"Master Plan: {complete_plan['master_plan']}")
        print(f"Total scenes: {complete_plan['scene_count']}")
        print(f"Total duration: {complete_plan['total_duration']}s")
        
        # Step 2: Generate voiceover audio for each scene
        progress_update(30, "Creating professional voiceover audio")
        audio_files = []
        temp_dir = "/tmp/audio_segments"
        os.makedirs(temp_dir, exist_ok=True)
        
        client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))
        
        for i, scene in enumerate(complete_plan['detailed_scenes']):
            voiceover_text = scene.get('voiceover', '')
            if not voiceover_text:
                continue
                
            progress_update(30 + (i * 5), f"Generating audio for scene {i+1}")
            
            # Generate TTS audio
            try:
                response = client.audio.speech.create(
                    model="tts-1",
                    voice="nova",  # Professional female voice
                    input=voiceover_text,
                    speed=1.0
                )
                
                audio_file = f"{temp_dir}/scene_{i}_audio.mp3"
                response.stream_to_file(audio_file)
                
                if os.path.exists(audio_file) and os.path.getsize(audio_file) > 0:
                    audio_files.append(audio_file)
                else:
                    print(f"Warning: Audio file {i} is empty or missing")
                    
            except Exception as e:
                print(f"Error generating audio for scene {i}: {e}")
                continue
        
        if not audio_files:
            raise Exception("No audio files were generated")
        
        # Step 3: Generate video segments with Luma AI
        progress_update(50, "Generating professional video segments with Luma AI")
        
        luma_service = LumaVideoService()
        
        # Prepare segments for Luma AI with COST SAFEGUARD
        luma_segments = []
        max_segments = min(4, len(complete_plan['detailed_scenes']))  # Never exceed 4 segments
        
        print(f"COST SAFEGUARD: Limiting to {max_segments} segments (was {len(complete_plan['detailed_scenes'])})")
        
        for i, scene in enumerate(complete_plan['detailed_scenes'][:max_segments]):
            if i < len(audio_files):  # Only process scenes with audio
                segment = {
                    'index': i,
                    'duration': min(scene.get('duration', 5), 10),  # Cap at 10 seconds
                    'voiceover': scene.get('voiceover', ''),
                    'visual_prompt': scene.get('optimized_prompt', scene.get('visual_prompt', '')),
                    'aspect_ratio': '9:16'
                }
                luma_segments.append(segment)
        
        # Generate videos in parallel
        video_files = luma_service.generate_multiple_segments(
            luma_segments,
            progress_callback=progress_update
        )
        
        if not video_files:
            raise Exception("No video segments were generated by Luma AI")
        
        if len(video_files) != len(audio_files):
            print(f"Warning: Video count ({len(video_files)}) != Audio count ({len(audio_files)})")
            # Match arrays by taking minimum length
            min_length = min(len(video_files), len(audio_files))
            video_files = video_files[:min_length]
            audio_files = audio_files[:min_length]
        
        # Step 4: Combine video + audio segments
        progress_update(85, "Assembling final video with synchronized audio")
        
        combined_segments = []
        for i, (video_file, audio_file) in enumerate(zip(video_files, audio_files)):
            combined_file = f"/tmp/combined_segment_{i}.mp4"
            
            # Combine video with audio
            combine_cmd = [
                "ffmpeg", "-y",
                "-i", video_file,
                "-i", audio_file,
                "-c:v", "copy",
                "-c:a", "aac",
                "-shortest",
                combined_file
            ]
            
            result = subprocess.run(combine_cmd, capture_output=True, text=True, timeout=60)
            if result.returncode == 0 and os.path.exists(combined_file):
                combined_segments.append(combined_file)
            else:
                print(f"Warning: Failed to combine segment {i}, using video only")
                combined_segments.append(video_file)
        
        # Step 5: Concatenate all segments
        progress_update(95, "Finalizing complete video")
        
        if len(combined_segments) == 1:
            shutil.copy2(combined_segments[0], output_file)
        else:
            # Create concat list
            concat_list = "/tmp/concat_list.txt"
            with open(concat_list, "w") as f:
                for segment in combined_segments:
                    f.write(f"file '{segment}'\n")
            
            # Concatenate
            concat_cmd = [
                "ffmpeg", "-y", "-f", "concat", "-safe", "0",
                "-i", concat_list,
                "-c", "copy",
                output_file
            ]
            
            result = subprocess.run(concat_cmd, capture_output=True, text=True, timeout=300)
            if result.returncode != 0:
                raise Exception(f"FFmpeg concatenation failed: {result.stderr}")
        
        # Verify output
        if not os.path.exists(output_file):
            raise Exception("Output video file was not created")
        
        file_size = os.path.getsize(output_file)
        if file_size < 1000:
            raise Exception("Output video file is too small")
        
        # Cleanup
        for segment in combined_segments:
            try:
                os.remove(segment)
            except:
                pass
        
        progress_update(100, "Video generation completed successfully!")
        return True
        
    except Exception as e:
        raise Exception(f"Enhanced video generation failed: {e}")

def main():
    """Main entry point for video generation"""
    parser = argparse.ArgumentParser(description="Enhanced AI Video Generator")
    parser.add_argument("--brand-name", required=True, help="Brand name")
    parser.add_argument("--brand-description", required=True, help="Brand description")
    parser.add_argument("--target-audience", help="Target audience")
    parser.add_argument("--tone", default="professional", help="Tone")
    parser.add_argument("--duration", type=int, default=30, help="Duration in seconds")
    parser.add_argument("--call-to-action", help="Call to action")
    parser.add_argument("--output", required=True, help="Output file path")
    parser.add_argument("--job-id", help="Job ID for tracking (optional)")
    
    args = parser.parse_args()
    
    try:
        progress_update(10, "Starting enhanced AI video generation")
        
        # Prepare brand info
        brand_info = {
            'brand_name': args.brand_name,
            'brand_description': args.brand_description,
            'target_audience': args.target_audience,
            'tone': args.tone,
            'duration': args.duration,
            'call_to_action': args.call_to_action
        }
        
        # Generate video
        create_enhanced_video_generation(brand_info, args.output)
        
        print(f"SUCCESS: Enhanced video generated at {args.output}")
        
    except Exception as e:
        print(f"ERROR: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()